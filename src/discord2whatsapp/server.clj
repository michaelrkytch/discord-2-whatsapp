(ns discord2whatsapp.server
  (:require [clojure.tools.reader.edn :as edn]
            [clojure.tools.logging :as log]
            [com.stuartsierra.component :as component]
            [discord2whatsapp.bot.forward-bot :as dcomm]
            [discord2whatsapp.store :as store]
            [discord2whatsapp.wacomms :as wacomm]
            [org.httpkit.server :as hk]
            [reitit.ring :as ring])
  (:gen-class))

(def web-handler
  "Handler is only responsible for serving up the QR code generated by Whatsapp Web at connection time."
  (ring/ring-handler
    (ring/router
      ["/qr/*" (ring/create-file-handler {:root "/Users/michael/dev/tmp/discord2whatsapp"})])
    (ring/create-default-handler)))

(defrecord WebServer [handler port                          ; parameters
                      http-server                           ; state
                      ]
  component/Lifecycle
  (start [this]
    (log/info "Starting web server on port " port)
    (assoc this :http-server (hk/run-server handler {:port port
                                                     :legacy-return-value? false})))
  (stop [this]
    (if http-server
      (do
        (hk/server-stop! http-server)
        (assoc this :http-server nil))
      this)))

(defn new-web-server [handler port]
  (map->WebServer {:handler handler
                   :port    port}))

(defn new-system
  "Build application system, including web server"
  [& [port config-path]]
  (let [port (or port 8080)
        config-path (or config-path "config.edn")
        config (edn/read-string (slurp config-path))]
    (component/system-map
      :store (store/new-store (str (:storage-dir config) "/discord2whatsapp.edn"))
      :wacomms (wacomm/new-wacomms (:storage-dir config))
      :bot (component/using
             (dcomm/new-bot config)
             [:wacomms :store])
      :web-server (new-web-server web-handler port))))

;; Handle to system for REPL interaction
(defonce system (atom nil))
(defn -main
  [& [port config-path]]
  (let [env (System/getenv)
        port (or port (get env "PORT" 8080))
        port (cond-> port (string? port) Integer/parseInt)
        config-path (or config-path (get env "CONFIG_PATH") "config.edn")
        sys (component/start (new-system port config-path))]
    (reset! system sys)
    ;; TODO figure out how to get this into component startup without circular dependency
    (wacomm/add-message-listener (:wacomms sys) (partial dcomm/forward-wa-message (:bot sys)))
    ;; block until bot shuts down
    (dcomm/join (:bot sys))))

(comment
  ;; commands for start up / shut down in repl
  (def system (new-system))
  (alter-var-root #'system component/start-system)
  ;; This is a separate step to avoid a circular dependency between wacomms and bot
  (wacomm/add-message-listener (:wacomms system) (partial dcomm/forward-wa-message (:bot system)))
  (alter-var-root #'system component/stop-system)
  ,)
